(init (module_declaration (module_keyword (keyword_module module )) (identifier (single_identifier (simple_identifier fifo))) (list_of_ports ( (port (port_expression (port_reference (identifier (single_identifier (simple_identifier clock)))))) , (port (port_expression (port_reference (identifier (single_identifier (simple_identifier reset)))))) , (port (port_expression (port_reference (identifier (single_identifier (simple_identifier in_data)))))) , (port (port_expression (port_reference (identifier (single_identifier (simple_identifier new_data)))))) , (port (port_expression (port_reference (identifier (single_identifier (simple_identifier out_data_valid)))))) , (port (port_expression (port_reference (identifier (single_identifier (simple_identifier out_data)))))) , (port (port_expression (port_reference (identifier (single_identifier (simple_identifier full)))))) )) ; (module_item (module_item_declaration (input_declaration (keyword_input input ) (list_of_port_identifiers (identifier (single_identifier (simple_identifier clock))) , (identifier (single_identifier (simple_identifier reset)))) ;))) (module_item (module_item_declaration (input_declaration (keyword_input \ninput ) (range [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier WIDTH))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_port_identifiers (identifier (single_identifier (simple_identifier in_data)))) ;))) (module_item (module_item_declaration (input_declaration (keyword_input \ninput ) (list_of_port_identifiers (identifier (single_identifier (simple_identifier new_data)))) ;))) (module_item (module_item_declaration (input_declaration (keyword_input \ninput ) (list_of_port_identifiers (identifier (single_identifier (simple_identifier out_data_valid)))) ;))) (module_item (module_item_declaration (parameter_declaration (keyword_parameter parameter ) (list_of_param_assignments (param_assignment (identifier (single_identifier (simple_identifier WIDTH))) = (expression (primary (number (unsigned_number 16)))))) ;))) (module_item (module_item_declaration (parameter_declaration (keyword_parameter \nparameter ) (list_of_param_assignments (param_assignment (identifier (single_identifier (simple_identifier DEPTH))) = (expression (primary (number (unsigned_number 16)))))) ;))) (module_item (module_item_declaration (parameter_declaration (keyword_parameter \nparameter ) (list_of_param_assignments (param_assignment (identifier (single_identifier (simple_identifier ADDRESSWIDTH))) = (expression (primary (number (unsigned_number 5)))))) ;))) (module_item (module_item_declaration (integer_declaration (keyword_integer integer ) (list_of_register_identifiers (register_name (identifier (single_identifier (simple_identifier k))))) ;))) (module_item (module_item_declaration (output_declaration (keyword_output output ) (range [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier WIDTH))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_port_identifiers (identifier (single_identifier (simple_identifier out_data)))) ;))) (module_item (module_item_declaration (output_declaration (keyword_output \noutput ) (list_of_port_identifiers (identifier (single_identifier (simple_identifier full)))) ;))) (module_item (module_item_declaration (reg_declaration (keyword_reg reg ) (list_of_register_identifiers (register_name (identifier (single_identifier (simple_identifier full))))) ;))) (module_item (module_item_declaration (net_declaration (net_type (keyword_wire \nwire )) (list_of_net_identifiers (identifier (single_identifier (simple_identifier next_full)))) ;))) (module_item (module_item_declaration (reg_declaration (keyword_reg reg ) (range [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier ADDRESSWIDTH))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_register_identifiers (register_name (identifier (single_identifier (simple_identifier rear))))) ;))) (module_item (module_item_declaration (reg_declaration (keyword_reg \nreg ) (range [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier ADDRESSWIDTH))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_register_identifiers (register_name (identifier (single_identifier (simple_identifier front))))) ;))) (module_item (always_construct (keyword_always always ) (statement (procedural_timing_control_statement (delay_or_event_control (event_control @ ( (event_expression (keyword_posedge posedge ) (expression (primary (identifier (single_identifier (simple_identifier clock)))))) ))) (statement_or_null (statement (seq_block (keyword_begin  begin\n) (statement (conditional_statement (keyword_if if) ( (expression (unary_operator !) (primary (identifier (single_identifier (simple_identifier reset))))) ) (statement_or_null (statement (non_blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier rear)))) < = (expression (primary (number (unsigned_number 0))))) ;)) (keyword_else else) (statement_or_null (statement (conditional_statement (keyword_if  if) ( (expression (primary (identifier (single_identifier (simple_identifier new_data))))) ) (statement_or_null (statement (seq_block (keyword_begin  begin\n) (statement (conditional_statement (keyword_if if) ( (expression (expression (primary (identifier (single_identifier (simple_identifier rear))))) = = (expression (primary (identifier (single_identifier (simple_identifier DEPTH)))))) ) (statement_or_null (statement (non_blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier rear)))) < = (expression (primary (number (unsigned_number 0))))) ;)) (keyword_else else) (statement_or_null (statement (non_blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier rear)))) < = (expression (expression (primary (identifier (single_identifier (simple_identifier rear))))) + (expression (primary (number (unsigned_number 1)))))) ;)))) (keyword_end end\n))))))))) (keyword_end end\n)))))))) (module_item (always_construct (keyword_always \nalways ) (statement (procedural_timing_control_statement (delay_or_event_control (event_control @ ( (event_expression (keyword_posedge posedge ) (expression (primary (identifier (single_identifier (simple_identifier clock)))))) ))) (statement_or_null (statement (seq_block (keyword_begin  begin\n) (statement (conditional_statement (keyword_if if) ( (expression (unary_operator !) (primary (identifier (single_identifier (simple_identifier reset))))) ) (statement_or_null (statement (non_blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier front)))) < = (expression (primary (number (unsigned_number 0))))) ;)) (keyword_else else) (statement_or_null (statement (conditional_statement (keyword_if  if) ( (expression (primary (identifier (single_identifier (simple_identifier out_data_valid))))) ) (statement_or_null (statement (seq_block (keyword_begin  begin\n) (statement (conditional_statement (keyword_if if) ( (expression (expression (primary (identifier (single_identifier (simple_identifier front))))) = = (expression (primary (identifier (single_identifier (simple_identifier DEPTH)))))) ) (statement_or_null (statement (non_blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier front)))) < = (expression (primary (number (unsigned_number 0))))) ;)) (keyword_else else) (statement_or_null (statement (non_blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier front)))) < = (expression (expression (primary (identifier (single_identifier (simple_identifier front))))) + (expression (primary (number (unsigned_number 1)))))) ;)))) (keyword_end end\n))))))))) (keyword_end end\n)))))))) (module_item (always_construct (keyword_always \nalways ) (statement (procedural_timing_control_statement (delay_or_event_control (event_control @ ( (event_expression (keyword_posedge posedge ) (expression (primary (identifier (single_identifier (simple_identifier clock)))))) ))) (statement_or_null (statement (seq_block (keyword_begin  begin\n) (statement (conditional_statement (keyword_if if) ( (expression (unary_operator !) (primary (identifier (single_identifier (simple_identifier reset))))) ) (statement_or_null (statement (non_blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier full)))) < = (expression (primary (number (unsigned_number 0))))) ;)) (keyword_else else) (statement_or_null (statement (non_blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier full)))) < = (expression (primary (identifier (single_identifier (simple_identifier next_full)))))) ;)))) (keyword_end \nend\n)))))))) (module_item (continuous_assign (keyword_assign \nassign ) (list_of_net_assignments (net_assignment (net_lvalue (identifier (single_identifier (simple_identifier next_full)))) = (expression ( (expression (expression (primary (identifier (single_identifier (simple_identifier front))))) = = (expression ( (expression (expression ( (expression (expression (primary (identifier (single_identifier (simple_identifier rear))))) = = (expression (primary (identifier (single_identifier (simple_identifier DEPTH)))))) )) ? (expression (primary (number (unsigned_number 0)))) : (expression ( (expression (expression (primary (identifier (single_identifier (simple_identifier rear))))) + (expression (primary (number (unsigned_number 1))))) ))) ))) )))) ;)) (module_item (module_instantiation (identifier (single_identifier (simple_identifier regfile))) (module_instance (name_of_instance (identifier (single_identifier (simple_identifier u1)))) ( (list_of_module_connections (ordered_port_connection (expression (primary (identifier (single_identifier (simple_identifier clock)))))) , (ordered_port_connection (expression (primary (identifier (single_identifier (simple_identifier reset)))))) , (ordered_port_connection (expression (primary (identifier (single_identifier (simple_identifier new_data)))))) , (ordered_port_connection (expression (primary (identifier (single_identifier (simple_identifier rear)))))) , (ordered_port_connection (expression (primary (identifier (single_identifier (simple_identifier front)))))) , (ordered_port_connection (expression (primary (identifier (single_identifier (simple_identifier in_data)))))) , (ordered_port_connection (expression (primary (identifier (single_identifier (simple_identifier out_data))))))) )) ;)) (keyword_endmodule endmodule\n)))
