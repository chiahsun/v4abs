(init (source_text (description (module_declaration (module_keyword (keyword_module module )) (identifier (single_identifier (simple_identifier arbiter))) (list_of_ports ( (port (port_expression (port_reference (identifier (single_identifier (simple_identifier clock)))))) , (port (port_expression (port_reference (identifier (single_identifier (simple_identifier reset)))))) , (port (port_expression (port_reference (identifier (single_identifier (simple_identifier round_or_priority)))))) , (port (port_expression (port_reference (identifier (single_identifier (simple_identifier request)))))) , (port (port_expression (port_reference (identifier (single_identifier (simple_identifier priority)))))) , (port (port_expression (port_reference (identifier (single_identifier (simple_identifier grant)))))) )) ; (module_item (module_item_declaration (integer_declaration (keyword_integer integer ) (list_of_register_identifiers (register_name (identifier (single_identifier (simple_identifier i)))) , (register_name (identifier (single_identifier (simple_identifier k))))) ;))) (module_item (module_item_declaration (parameter_declaration (keyword_parameter parameter ) (list_of_param_assignments (param_assignment (identifier (single_identifier (simple_identifier NUMUNITS))) = (expression (primary (number (unsigned_number 9)))))) ;))) (module_item (module_item_declaration (parameter_declaration (keyword_parameter \nparameter ) (list_of_param_assignments (param_assignment (identifier (single_identifier (simple_identifier ADDRESSWIDTH))) = (expression (primary (number (unsigned_number 3)))))) ;))) (module_item (module_item_declaration (input_declaration (keyword_input input ) (list_of_port_identifiers (identifier (single_identifier (simple_identifier clock)))) ;))) (module_item (module_item_declaration (input_declaration (keyword_input \ninput ) (list_of_port_identifiers (identifier (single_identifier (simple_identifier reset)))) ;))) (module_item (module_item_declaration (input_declaration (keyword_input \ninput ) (list_of_port_identifiers (identifier (single_identifier (simple_identifier round_or_priority)))) ;))) (module_item (module_item_declaration (input_declaration (keyword_input \ninput ) (range [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier NUMUNITS))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_port_identifiers (identifier (single_identifier (simple_identifier request)))) ;))) (module_item (module_item_declaration (input_declaration (keyword_input \ninput ) (range [ (constant_expression (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier ADDRESSWIDTH))))) * (constant_expression (constant_primary (identifier (single_identifier (simple_identifier NUMUNITS)))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_port_identifiers (identifier (single_identifier (simple_identifier priority)))) ;))) (module_item (module_item_declaration (output_declaration (keyword_output output ) (range [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier NUMUNITS))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_port_identifiers (identifier (single_identifier (simple_identifier grant)))) ;))) (module_item (module_item_declaration (reg_declaration (keyword_reg reg ) (range [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier ADDRESSWIDTH))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_register_identifiers (register_name (identifier (single_identifier (simple_identifier prio))) [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier NUMUNITS))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ])) ;))) (module_item (module_item_declaration (reg_declaration (keyword_reg \nreg ) (range [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier ADDRESSWIDTH))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_register_identifiers (register_name (identifier (single_identifier (simple_identifier tmp_prio))))) ;))) (module_item (always_construct (keyword_always always ) (statement (procedural_timing_control_statement (delay_or_event_control (event_control @ ( (event_expression (expression (primary (identifier (single_identifier (simple_identifier priority)))))) ))) (statement_or_null (statement (seq_block (keyword_begin  begin\n) (statement (loop_statement (keyword_for for ) ( (reg_assignment (reg_lvalue (identifier (single_identifier (simple_identifier i)))) = (expression (primary (number (unsigned_number 0))))) ; (expression (expression (primary (identifier (single_identifier (simple_identifier i))))) < (expression (primary (identifier (single_identifier (simple_identifier NUMUNITS)))))) ; (reg_assignment (reg_lvalue (identifier (single_identifier (simple_identifier i)))) = (expression (expression (primary (identifier (single_identifier (simple_identifier i))))) + (expression (primary (number (unsigned_number 1)))))) ) (statement (seq_block (keyword_begin  begin\n) (statement (loop_statement (keyword_for for ) ( (reg_assignment (reg_lvalue (identifier (single_identifier (simple_identifier k)))) = (expression (primary (number (unsigned_number 0))))) ; (expression (expression (primary (identifier (single_identifier (simple_identifier k))))) < (expression (primary (identifier (single_identifier (simple_identifier ADDRESSWIDTH)))))) ; (reg_assignment (reg_lvalue (identifier (single_identifier (simple_identifier k)))) = (expression (expression (primary (identifier (single_identifier (simple_identifier k))))) + (expression (primary (number (unsigned_number 1)))))) ) (statement (blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier tmp_prio))) [ (expression (primary (identifier (single_identifier (simple_identifier k))))) ]) = (expression (primary (identifier (single_identifier (simple_identifier priority))) [ (expression (expression (expression (primary (identifier (single_identifier (simple_identifier k))))) * (expression (primary (identifier (single_identifier (simple_identifier ADDRESSWIDTH)))))) + (expression (primary (identifier (single_identifier (simple_identifier k)))))) ]))) ;))) (statement (blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier prio))) [ (expression (primary (identifier (single_identifier (simple_identifier i))))) ]) = (expression (primary (identifier (single_identifier (simple_identifier tmp_prio)))))) ;) (keyword_end end\n))))) (keyword_end end\n)))))))) (module_item (module_item_declaration (reg_declaration (keyword_reg \nreg ) (range [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier NUMUNITS))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_register_identifiers (register_name (identifier (single_identifier (simple_identifier grant))))) ;))) (module_item (module_item_declaration (reg_declaration (keyword_reg \nreg ) (range [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier NUMUNITS))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_register_identifiers (register_name (identifier (single_identifier (simple_identifier grantD))))) ;))) (module_item (module_item_declaration (reg_declaration (keyword_reg reg ) (range [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier ADDRESSWIDTH))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_register_identifiers (register_name (identifier (single_identifier (simple_identifier next))))) ;))) (module_item (module_item_declaration (reg_declaration (keyword_reg \nreg ) (range [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier ADDRESSWIDTH))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_register_identifiers (register_name (identifier (single_identifier (simple_identifier nextD))))) ;))) (module_item (module_item_declaration (reg_declaration (keyword_reg reg ) (range [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier ADDRESSWIDTH))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_register_identifiers (register_name (identifier (single_identifier (simple_identifier scan))) [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier NUMUNITS))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ])) ;))) (module_item (module_item_declaration (reg_declaration (keyword_reg reg ) (range [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier NUMUNITS))))) - (constant_expression (constant_primary (number (unsigned_number 2))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_register_identifiers (register_name (identifier (single_identifier (simple_identifier found))))) ;))) (module_item (module_item_declaration (reg_declaration (keyword_reg \nreg ) (range [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier ADDRESSWIDTH))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_register_identifiers (register_name (identifier (single_identifier (simple_identifier selectPrio))) [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier NUMUNITS))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ])) ;))) (module_item (module_item_declaration (reg_declaration (keyword_reg reg ) (range [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier ADDRESSWIDTH))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_register_identifiers (register_name (identifier (single_identifier (simple_identifier min))))) ;))) (module_item (module_item_declaration (reg_declaration (keyword_reg reg ) (range [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier NUMUNITS))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_register_identifiers (register_name (identifier (single_identifier (simple_identifier minPrio))))) ;))) (module_item (module_item_declaration (net_declaration (net_type (keyword_wire wire )) (range [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier NUMUNITS))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_net_identifiers (identifier (single_identifier (simple_identifier prioRequest)))) ;))) (module_item (module_item_declaration (reg_declaration (keyword_reg reg ) (range [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier NUMUNITS))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_register_identifiers (register_name (identifier (single_identifier (simple_identifier finalRequest))))) ;))) (module_item (always_construct (keyword_always always ) (statement (procedural_timing_control_statement (delay_or_event_control (event_control @ ( (event_expression (keyword_posedge posedge ) (expression (primary (identifier (single_identifier (simple_identifier clock)))))) ))) (statement_or_null (statement (seq_block (keyword_begin  begin\n) (statement (conditional_statement (keyword_if if) ( (expression (unary_operator !) (primary (identifier (single_identifier (simple_identifier reset))))) ) (statement_or_null (statement (non_blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier grant)))) < = (expression (primary (number (unsigned_number 0))))) ;)) (keyword_else else) (statement_or_null (statement (non_blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier grant)))) < = (expression (primary (identifier (single_identifier (simple_identifier grantD)))))) ;)))) (keyword_end \nend\n)))))))) (module_item (always_construct (keyword_always \nalways ) (statement (procedural_timing_control_statement (delay_or_event_control (event_control @ ( (event_expression (keyword_posedge posedge ) (expression (primary (identifier (single_identifier (simple_identifier clock)))))) ))) (statement_or_null (statement (seq_block (keyword_begin  begin\n) (statement (conditional_statement (keyword_if if) ( (expression (unary_operator !) (primary (identifier (single_identifier (simple_identifier reset))))) ) (statement_or_null (statement (non_blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier next)))) < = (expression (primary (number (unsigned_number 0))))) ;)) (keyword_else else) (statement_or_null (statement (non_blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier next)))) < = (expression (primary (identifier (single_identifier (simple_identifier nextD)))))) ;)))) (keyword_end \nend\n)))))))) (module_item (always_construct (keyword_always \nalways ) (statement (procedural_timing_control_statement (delay_or_event_control (event_control @ ( * ))) (statement_or_null (statement (seq_block (keyword_begin  begin\n) (statement (loop_statement (keyword_for for ) ( (reg_assignment (reg_lvalue (identifier (single_identifier (simple_identifier i)))) = (expression (primary (number (unsigned_number 0))))) ; (expression (expression (primary (identifier (single_identifier (simple_identifier i))))) < (expression (primary (identifier (single_identifier (simple_identifier NUMUNITS)))))) ; (reg_assignment (reg_lvalue (identifier (single_identifier (simple_identifier i)))) = (expression (expression (primary (identifier (single_identifier (simple_identifier i))))) + (expression (primary (number (unsigned_number 1)))))) ) (statement (blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier selectPrio))) [ (expression (primary (identifier (single_identifier (simple_identifier i))))) ]) = (expression (expression (primary (identifier (single_identifier (simple_identifier request))) [ (expression (primary (identifier (single_identifier (simple_identifier i))))) ])) ? (expression (primary (identifier (single_identifier (simple_identifier prio))) [ (expression (primary (identifier (single_identifier (simple_identifier i))))) ])) : (expression (expression (primary (identifier (single_identifier (simple_identifier NUMUNITS))))) - (expression (primary (number (unsigned_number 1))))))) ;))) (keyword_end \nend\n)))))))) (module_item (always_construct (keyword_always \nalways ) (statement (procedural_timing_control_statement (delay_or_event_control (event_control @ ( * ))) (statement_or_null (statement (seq_block (keyword_begin  begin\n) (statement (loop_statement (keyword_for for ) ( (reg_assignment (reg_lvalue (identifier (single_identifier (simple_identifier i)))) = (expression (primary (number (unsigned_number 0))))) ; (expression (expression (primary (identifier (single_identifier (simple_identifier i))))) < (expression (primary (identifier (single_identifier (simple_identifier NUMUNITS)))))) ; (reg_assignment (reg_lvalue (identifier (single_identifier (simple_identifier i)))) = (expression (expression (primary (identifier (single_identifier (simple_identifier i))))) + (expression (primary (number (unsigned_number 1)))))) ) (statement (blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier finalRequest))) [ (expression (primary (identifier (single_identifier (simple_identifier i))))) ]) = (expression (expression (primary (identifier (single_identifier (simple_identifier round_or_priority))))) ? (expression (primary (identifier (single_identifier (simple_identifier prioRequest))) [ (expression (primary (identifier (single_identifier (simple_identifier i))))) ])) : (expression (primary (identifier (single_identifier (simple_identifier request))) [ (expression (primary (identifier (single_identifier (simple_identifier i))))) ])))) ;))) (keyword_end \nend\n)))))))) (module_item (always_construct (keyword_always \nalways ) (statement (procedural_timing_control_statement (delay_or_event_control (event_control @ ( * ))) (statement_or_null (statement (seq_block (keyword_begin  begin\n) (statement (blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier min)))) = (expression (primary (identifier (single_identifier (simple_identifier selectPrio))) [ (expression (primary (number (unsigned_number 0)))) ]))) ;) (statement (loop_statement (keyword_for for ) ( (reg_assignment (reg_lvalue (identifier (single_identifier (simple_identifier i)))) = (expression (primary (number (unsigned_number 1))))) ; (expression (expression (primary (identifier (single_identifier (simple_identifier i))))) < (expression (primary (identifier (single_identifier (simple_identifier NUMUNITS)))))) ; (reg_assignment (reg_lvalue (identifier (single_identifier (simple_identifier i)))) = (expression (expression (primary (identifier (single_identifier (simple_identifier i))))) + (expression (primary (number (unsigned_number 1)))))) ) (statement (conditional_statement (keyword_if if) ( (expression (expression (primary (identifier (single_identifier (simple_identifier selectPrio))) [ (expression (primary (identifier (single_identifier (simple_identifier i))))) ])) < (expression (primary (identifier (single_identifier (simple_identifier min)))))) ) (statement_or_null (statement (blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier min)))) = (expression (primary (identifier (single_identifier (simple_identifier selectPrio))) [ (expression (primary (identifier (single_identifier (simple_identifier i))))) ]))) ;)))))) (keyword_end \nend\n)))))))) (module_item (always_construct (keyword_always \nalways ) (statement (procedural_timing_control_statement (delay_or_event_control (event_control @ ( * ))) (statement_or_null (statement (seq_block (keyword_begin  begin\n) (statement (loop_statement (keyword_for for ) ( (reg_assignment (reg_lvalue (identifier (single_identifier (simple_identifier i)))) = (expression (primary (number (unsigned_number 0))))) ; (expression (expression (primary (identifier (single_identifier (simple_identifier i))))) < (expression (primary (identifier (single_identifier (simple_identifier NUMUNITS)))))) ; (reg_assignment (reg_lvalue (identifier (single_identifier (simple_identifier i)))) = (expression (expression (primary (identifier (single_identifier (simple_identifier i))))) + (expression (primary (number (unsigned_number 1)))))) ) (statement (blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier minPrio))) [ (expression (primary (identifier (single_identifier (simple_identifier i))))) ]) = (expression (expression ( (expression (expression (primary (identifier (single_identifier (simple_identifier prio))) [ (expression (primary (identifier (single_identifier (simple_identifier i))))) ])) = = (expression (primary (identifier (single_identifier (simple_identifier min)))))) )) ? (expression (primary (number (unsigned_number 1)))) : (expression (primary (number (unsigned_number 0)))))) ;))) (keyword_end \nend\n)))))))) (module_item (always_construct (keyword_always \nalways ) (statement (procedural_timing_control_statement (delay_or_event_control (event_control @ ( (event_expression (expression (primary (identifier (single_identifier (simple_identifier next)))))) ))) (statement_or_null (statement (seq_block (keyword_begin  begin\n) (statement (loop_statement (keyword_for for ) ( (reg_assignment (reg_lvalue (identifier (single_identifier (simple_identifier i)))) = (expression (primary (number (unsigned_number 0))))) ; (expression (expression (primary (identifier (single_identifier (simple_identifier i))))) < (expression (primary (identifier (single_identifier (simple_identifier NUMUNITS)))))) ; (reg_assignment (reg_lvalue (identifier (single_identifier (simple_identifier i)))) = (expression (expression (primary (identifier (single_identifier (simple_identifier i))))) + (expression (primary (number (unsigned_number 1)))))) ) (statement (blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier scan))) [ (expression (primary (identifier (single_identifier (simple_identifier i))))) ]) = (expression (expression ( (expression (expression (expression (primary (identifier (single_identifier (simple_identifier next))))) + (expression (primary (identifier (single_identifier (simple_identifier i)))))) < (expression (primary (identifier (single_identifier (simple_identifier NUMUNITS)))))) )) ? (expression (expression (primary (identifier (single_identifier (simple_identifier next))))) + (expression (primary (identifier (single_identifier (simple_identifier i)))))) : (expression (expression (expression (primary (identifier (single_identifier (simple_identifier next))))) + (expression (primary (identifier (single_identifier (simple_identifier i)))))) - (expression (primary (identifier (single_identifier (simple_identifier NUMUNITS)))))))) ;))) (keyword_end \nend\n)))))))) (module_item (always_construct (keyword_always \nalways ) (statement (procedural_timing_control_statement (delay_or_event_control (event_control @ ( * ))) (statement_or_null (statement (seq_block (keyword_begin  begin\n) (statement (blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier found))) [ (expression (primary (number (unsigned_number 0)))) ]) = (expression (primary (identifier (single_identifier (simple_identifier finalRequest))) [ (expression (primary (identifier (single_identifier (simple_identifier scan))) [ (expression (primary (number (unsigned_number 0)))) ])) ]))) ;) (statement (loop_statement (keyword_for for ) ( (reg_assignment (reg_lvalue (identifier (single_identifier (simple_identifier i)))) = (expression (primary (number (unsigned_number 1))))) ; (expression (expression (primary (identifier (single_identifier (simple_identifier i))))) < (expression (expression (primary (identifier (single_identifier (simple_identifier NUMUNITS))))) - (expression (primary (number (unsigned_number 1)))))) ; (reg_assignment (reg_lvalue (identifier (single_identifier (simple_identifier i)))) = (expression (expression (primary (identifier (single_identifier (simple_identifier i))))) + (expression (primary (number (unsigned_number 1)))))) ) (statement (blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier found))) [ (expression (primary (identifier (single_identifier (simple_identifier i))))) ]) = (expression (expression (primary (identifier (single_identifier (simple_identifier found))) [ (expression (expression (primary (identifier (single_identifier (simple_identifier i))))) - (expression (primary (number (unsigned_number 1))))) ])) | (expression (unary_operator |) (primary (identifier (single_identifier (simple_identifier finalRequest))) [ (expression (primary (identifier (single_identifier (simple_identifier scan))) [ (expression (primary (identifier (single_identifier (simple_identifier i))))) ])) ])))) ;))) (keyword_end \nend\n)))))))) (module_item (always_construct (keyword_always \nalways ) (statement (procedural_timing_control_statement (delay_or_event_control (event_control @ ( * ))) (statement_or_null (statement (seq_block (keyword_begin  begin\n) (statement (blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier grantD))) [ (expression (primary (identifier (single_identifier (simple_identifier scan))) [ (expression (primary (number (unsigned_number 0)))) ])) ]) = (expression (primary (identifier (single_identifier (simple_identifier finalRequest))) [ (expression (primary (identifier (single_identifier (simple_identifier scan))) [ (expression (primary (number (unsigned_number 0)))) ])) ]))) ;) (statement (loop_statement (keyword_for for ) ( (reg_assignment (reg_lvalue (identifier (single_identifier (simple_identifier i)))) = (expression (primary (number (unsigned_number 1))))) ; (expression (expression (primary (identifier (single_identifier (simple_identifier i))))) < (expression (primary (identifier (single_identifier (simple_identifier NUMUNITS)))))) ; (reg_assignment (reg_lvalue (identifier (single_identifier (simple_identifier i)))) = (expression (expression (primary (identifier (single_identifier (simple_identifier i))))) + (expression (primary (number (unsigned_number 1)))))) ) (statement (blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier grantD))) [ (expression (primary (identifier (single_identifier (simple_identifier scan))) [ (expression (primary (identifier (single_identifier (simple_identifier i))))) ])) ]) = (expression (expression (primary (identifier (single_identifier (simple_identifier finalRequest))) [ (expression (primary (identifier (single_identifier (simple_identifier scan))) [ (expression (primary (identifier (single_identifier (simple_identifier i))))) ])) ])) & & (expression (unary_operator ~) (primary (identifier (single_identifier (simple_identifier found))) [ (expression (expression (primary (identifier (single_identifier (simple_identifier i))))) - (expression (primary (number (unsigned_number 1))))) ])))) ;))) (keyword_end \nend\n)))))))) (module_item (always_construct (keyword_always \nalways ) (statement (procedural_timing_control_statement (delay_or_event_control (event_control @ ( (event_expression (expression (primary (identifier (single_identifier (simple_identifier grantD)))))) ))) (statement_or_null (statement (seq_block (keyword_begin  begin\n) (statement (blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier nextD)))) = (expression (primary (number (unsigned_number 0))))) ;) (statement (loop_statement (keyword_for for ) ( (reg_assignment (reg_lvalue (identifier (single_identifier (simple_identifier i)))) = (expression (primary (number (unsigned_number 0))))) ; (expression (expression (primary (identifier (single_identifier (simple_identifier i))))) < (expression (expression (primary (identifier (single_identifier (simple_identifier NUMUNITS))))) - (expression (primary (number (unsigned_number 1)))))) ; (reg_assignment (reg_lvalue (identifier (single_identifier (simple_identifier i)))) = (expression (expression (primary (identifier (single_identifier (simple_identifier i))))) + (expression (primary (number (unsigned_number 1)))))) ) (statement (conditional_statement (keyword_if if) ( (expression (primary (identifier (single_identifier (simple_identifier grantD))) [ (expression (primary (identifier (single_identifier (simple_identifier i))))) ])) ) (statement_or_null (statement (blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier nextD)))) = (expression (expression (primary (identifier (single_identifier (simple_identifier v))))) + (expression (primary (number (unsigned_number 1)))))) ;)))))) (keyword_end \nend\n)))))))) (keyword_endmodule \nendmodule\n)))))
