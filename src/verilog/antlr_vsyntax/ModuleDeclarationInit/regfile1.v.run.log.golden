(init (module_declaration (module_keyword (keyword_module module )) (identifier (single_identifier (simple_identifier regfile))) (list_of_ports ( (port (port_expression (port_reference (identifier (single_identifier (simple_identifier clock)))))) , (port (port_expression (port_reference (identifier (single_identifier (simple_identifier reset)))))) , (port (port_expression (port_reference (identifier (single_identifier (simple_identifier write_enable)))))) , (port (port_expression (port_reference (identifier (single_identifier (simple_identifier dest)))))) , (port (port_expression (port_reference (identifier (single_identifier (simple_identifier source)))))) , (port (port_expression (port_reference (identifier (single_identifier (simple_identifier data_in)))))) , (port (port_expression (port_reference (identifier (single_identifier (simple_identifier data_out)))))) )) ; (module_item (module_item_declaration (parameter_declaration (keyword_parameter parameter ) (list_of_param_assignments (param_assignment (identifier (single_identifier (simple_identifier WIDTH))) = (expression (primary (number (unsigned_number 16)))))) ;))) (module_item (module_item_declaration (parameter_declaration (keyword_parameter \nparameter ) (list_of_param_assignments (param_assignment (identifier (single_identifier (simple_identifier DEPTH))) = (expression (primary (number (unsigned_number 3)))))) ;))) (module_item (module_item_declaration (parameter_declaration (keyword_parameter \nparameter ) (list_of_param_assignments (param_assignment (identifier (single_identifier (simple_identifier ADDRESSWIDTH))) = (expression (primary (number (unsigned_number 5)))))) ;))) (module_item (module_item_declaration (integer_declaration (keyword_integer integer ) (list_of_register_identifiers (register_name (identifier (single_identifier (simple_identifier i)))) , (register_name (identifier (single_identifier (simple_identifier k))))) ;))) (module_item (module_item_declaration (input_declaration (keyword_input input ) (list_of_port_identifiers (identifier (single_identifier (simple_identifier clock))) , (identifier (single_identifier (simple_identifier reset))) , (identifier (single_identifier (simple_identifier write_enable)))) ;))) (module_item (module_item_declaration (input_declaration (keyword_input \ninput ) (range [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier ADDRESSWIDTH))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_port_identifiers (identifier (single_identifier (simple_identifier dest)))) ;))) (module_item (module_item_declaration (input_declaration (keyword_input \ninput ) (range [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier ADDRESSWIDTH))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_port_identifiers (identifier (single_identifier (simple_identifier source)))) ;))) (module_item (module_item_declaration (input_declaration (keyword_input \ninput ) (range [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier WIDTH))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_port_identifiers (identifier (single_identifier (simple_identifier data_in)))) ;))) (module_item (module_item_declaration (output_declaration (keyword_output \noutput ) (range [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier WIDTH))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_port_identifiers (identifier (single_identifier (simple_identifier data_out)))) ;))) (module_item (module_item_declaration (reg_declaration (keyword_reg reg ) (range [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier WIDTH))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_register_identifiers (register_name (identifier (single_identifier (simple_identifier data_out))))) ;))) (module_item (module_item_declaration (reg_declaration (keyword_reg \nreg ) (range [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier WIDTH))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_register_identifiers (register_name (identifier (single_identifier (simple_identifier rf))) [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier DEPTH))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ])) ;))) (module_item (module_item_declaration (net_declaration (net_type (keyword_wire \nwire )) (range [ (constant_expression (constant_expression (constant_primary (identifier (single_identifier (simple_identifier DEPTH))))) - (constant_expression (constant_primary (number (unsigned_number 1))))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_net_identifiers (identifier (single_identifier (simple_identifier write_enable_decoded)))) ;))) (module_item (continuous_assign (keyword_assign assign ) (list_of_net_assignments (net_assignment (net_lvalue (identifier (single_identifier (simple_identifier write_enable_decoded)))) = (expression ( (expression (expression (primary (identifier (single_identifier (simple_identifier write_enable))))) < < (expression (primary (identifier (single_identifier (simple_identifier dest)))))) )))) ;)) (module_item (always_construct (keyword_always always ) (statement (procedural_timing_control_statement (delay_or_event_control (event_control @ ( (event_expression (keyword_posedge posedge ) (expression (primary (identifier (single_identifier (simple_identifier clock)))))) ))) (statement_or_null (statement (seq_block (keyword_begin  begin\n) (statement (conditional_statement (keyword_if if) ( (expression (unary_operator !) (primary (identifier (single_identifier (simple_identifier reset))))) ) (statement_or_null (statement (non_blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier data_out)))) < = (expression (primary (number (unsigned_number 0))))) ;)) (keyword_else else) (statement_or_null (statement (non_blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier data_out)))) < = (expression (primary (identifier (single_identifier (simple_identifier rf))) [ (expression (primary (identifier (single_identifier (simple_identifier source))))) ]))) ;)))) (keyword_end \nend\n)))))))) (module_item (always_construct (keyword_always \nalways ) (statement (procedural_timing_control_statement (delay_or_event_control (event_control @ ( (event_expression (keyword_posedge posedge ) (expression (primary (identifier (single_identifier (simple_identifier clock)))))) ))) (statement_or_null (statement (seq_block (keyword_begin  begin\n) (statement (conditional_statement (keyword_if if) ( (expression (unary_operator !) (primary (identifier (single_identifier (simple_identifier reset))))) ) (statement_or_null (statement (seq_block (keyword_begin  begin\n) (statement (loop_statement (keyword_for for ) ( (reg_assignment (reg_lvalue (identifier (single_identifier (simple_identifier i)))) = (expression (primary (number (unsigned_number 0))))) ; (expression (expression (primary (identifier (single_identifier (simple_identifier i))))) < (expression (primary (identifier (single_identifier (simple_identifier DEPTH)))))) ; (reg_assignment (reg_lvalue (identifier (single_identifier (simple_identifier i)))) = (expression (expression (primary (identifier (single_identifier (simple_identifier i))))) + (expression (primary (number (unsigned_number 1)))))) ) (statement (non_blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier rf))) [ (expression (primary (identifier (single_identifier (simple_identifier i))))) ]) < = (expression (primary (number (unsigned_number 0))))) ;))) (keyword_end end\n)))) (keyword_else else) (statement_or_null (statement (seq_block (keyword_begin  begin\n) (statement (loop_statement (keyword_for for ) ( (reg_assignment (reg_lvalue (identifier (single_identifier (simple_identifier k)))) = (expression (primary (number (unsigned_number 0))))) ; (expression (expression (primary (identifier (single_identifier (simple_identifier k))))) < (expression (primary (identifier (single_identifier (simple_identifier DEPTH)))))) ; (reg_assignment (reg_lvalue (identifier (single_identifier (simple_identifier k)))) = (expression (expression (primary (identifier (single_identifier (simple_identifier k))))) + (expression (primary (number (unsigned_number 1)))))) ) (statement (conditional_statement (keyword_if if) ( (expression (primary (identifier (single_identifier (simple_identifier write_enable_decoded))) [ (expression (primary (identifier (single_identifier (simple_identifier k))))) ])) ) (statement_or_null (statement (non_blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier rf))) [ (expression (primary (identifier (single_identifier (simple_identifier k))))) ]) < = (expression (primary (identifier (single_identifier (simple_identifier data_in)))))) ;)))))) (keyword_end end\n)))))) (keyword_end end\n)))))))) (keyword_endmodule endmodule\n)))
