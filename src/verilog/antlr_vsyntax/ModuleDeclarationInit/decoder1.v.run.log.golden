(init (module_declaration (module_keyword (keyword_module module )) (identifier (single_identifier (simple_identifier decode1))) (list_of_ports ( (port (port_expression (port_reference (identifier (single_identifier (simple_identifier op)))))) , (port (port_expression (port_reference (identifier (single_identifier (simple_identifier funct)))))) , (port (port_expression (port_reference (identifier (single_identifier (simple_identifier sel)))))) , (port (port_expression (port_reference (identifier (single_identifier (simple_identifier B)))))) )) ; (module_item (module_item_declaration (input_declaration (keyword_input input ) (range [ (constant_expression (constant_primary (number (unsigned_number 1)))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_port_identifiers (identifier (single_identifier (simple_identifier op)))) ;))) (module_item (module_item_declaration (input_declaration (keyword_input \ninput ) (range [ (constant_expression (constant_primary (number (unsigned_number 4)))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_port_identifiers (identifier (single_identifier (simple_identifier funct)))) ;))) (module_item (module_item_declaration (output_declaration (keyword_output \noutput ) (range [ (constant_expression (constant_primary (number (unsigned_number 1)))) : (constant_expression (constant_primary (number (unsigned_number 0)))) ]) (list_of_port_identifiers (identifier (single_identifier (simple_identifier sel)))) ;))) (module_item (module_item_declaration (output_declaration (keyword_output \noutput ) (list_of_port_identifiers (identifier (single_identifier (simple_identifier B)))) ;))) (module_item (always_construct (keyword_always always ) (statement (procedural_timing_control_statement (delay_or_event_control (event_control @ ( (event_expression (event_expression (expression (primary (identifier (single_identifier (simple_identifier op)))))) (keyword_or  or ) (event_expression (expression (primary (identifier (single_identifier (simple_identifier funct))))))) ))) (statement_or_null (statement (case_statement (keyword_case casex ) ( (expression (primary (concatenation { (expression (primary (identifier (single_identifier (simple_identifier op))))) , (expression (primary (identifier (single_identifier (simple_identifier funct))))) }))) ) (case_item (expression (primary (concatenation { (expression (primary (number (binary_number 2'b01)))) , (expression (primary (number (binary_number 5'bx)))) }))) : (statement_or_null (statement (seq_block (keyword_begin  begin\n) (statement (blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier sel)))) = (expression (primary (number (binary_number 2'b11))))) ;) (statement (blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier B)))) = (expression (primary (number (binary_number 1'b1))))) ;) (keyword_end end\n))))) (case_item (expression (primary (concatenation { (expression (primary (number (binary_number 2'b11)))) , (expression (primary (number (binary_number 5'b00011)))) }))) : (statement_or_null (statement (seq_block (keyword_begin  begin\n) (statement (blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier sel)))) = (expression (primary (number (binary_number 2'b01))))) ;) (statement (blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier B)))) = (expression (primary (number (binary_number 1'b1))))) ;) (keyword_end end\n))))) (case_item (expression (primary (concatenation { (expression (primary (number (binary_number 2'b11)))) , (expression (primary (number (binary_number 5'b00001)))) }))) : (statement_or_null (statement (seq_block (keyword_begin  begin\n) (statement (blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier sel)))) = (expression (primary (number (binary_number 2'b10))))) ;) (statement (blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier B)))) = (expression (primary (number (binary_number 1'b1))))) ;) (keyword_end end\n))))) (case_item (keyword_default default ) : (statement_or_null (statement (seq_block (keyword_begin  begin\n) (statement (blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier sel)))) = (expression (primary (number (binary_number 2'bxx))))) ;) (statement (blocking_assignment (reg_lvalue (identifier (single_identifier (simple_identifier B)))) = (expression (primary (number (binary_number 1'bx))))) ;) (keyword_end end\n))))) (keyword_endcase endcase\n)))))))) (keyword_endmodule \nendmodule\n)))
